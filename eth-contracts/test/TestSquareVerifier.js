// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
var Verifier = artifacts.require('Verifier');
var fs = require('fs');

contract('Verifier', accounts => {
    beforeEach(async function () { 
        this.verifierContract = await Verifier.new();
    });
    

    // Test verification with correct proof
    // - use the contents from proof.json generated from zokrates steps
    it('Test verification with correct proof', async function() {
        let proof = JSON.parse(fs.readFileSync(".\\test\\proof.json"));
        let proofParameter = {
            a: proof.proof.a,
            b: proof.proof.b,
            c: proof.proof.c
        };
        let result = await this.verifierContract.verifyTx(proofParameter, proof.inputs);
        assert.equal(result, true, 'Test verification has executed correctly with correct values');
    });

    // Test verification with incorrect proof
    it('Test verification with incorrect proof', async function() {
        let proof = JSON.parse(fs.readFileSync(".\\test\\proof.json"));
        let proofParameter = {
            a: proof.proof.a,
            b: proof.proof.b,
            c: proof.proof.c
        };
        let cheat = [...proof.inputs];
        cheat[cheat.length-1] = cheat[cheat.length-1].replace(/[01]$/, cheat[cheat.length-1][65] == '1' ? '0': '1');
        let result = await this.verifierContract.verifyTx(proofParameter, cheat);
        assert.equal(result, false, 'Test verification has executed correctly with wrong values');
    });
})
    
